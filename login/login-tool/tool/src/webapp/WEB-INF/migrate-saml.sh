#!/bin/bash
# SAML migration script for Sakai
# This script helps with migration from spring-security-saml-extension to Spring Security SAML 2.0

set -e

# Determine the Sakai home directory
if [ -z "$SAKAI_HOME" ]; then
  SAKAI_HOME="/opt/tomcat/sakai"
  echo "SAKAI_HOME not set, using default: $SAKAI_HOME"
fi

# Determine the Tomcat directory
if [ -z "$CATALINA_HOME" ] && [ -z "$CATALINA_BASE" ]; then
  # Try to guess from SAKAI_HOME
  TOMCAT_DIR=$(dirname "$SAKAI_HOME")
  echo "CATALINA_HOME and CATALINA_BASE not set, guessing: $TOMCAT_DIR"
else
  # Use CATALINA_BASE if set, otherwise CATALINA_HOME
  TOMCAT_DIR=${CATALINA_BASE:-$CATALINA_HOME}
  echo "Using Tomcat directory: $TOMCAT_DIR"
fi

# Create backup directory
BACKUP_DIR="$SAKAI_HOME/saml-backup-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"
echo "Created backup directory: $BACKUP_DIR"

# Create Tomcat SAML configuration directory
TOMCAT_SAML_DIR="$TOMCAT_DIR/sakai/saml"
mkdir -p "$TOMCAT_SAML_DIR"
echo "Created Tomcat SAML configuration directory: $TOMCAT_SAML_DIR"

# Backup existing SAML files
echo "Backing up existing SAML files..."
if [ -f "$SAKAI_HOME/SakaiSAMLApp_sp.xml" ]; then
  cp "$SAKAI_HOME/SakaiSAMLApp_sp.xml" "$BACKUP_DIR/"
  echo "Backed up SP metadata: $SAKAI_HOME/SakaiSAMLApp_sp.xml"
fi

if [ -f "$SAKAI_HOME/ssocircle_idp.xml" ]; then
  cp "$SAKAI_HOME/ssocircle_idp.xml" "$BACKUP_DIR/"
  echo "Backed up IdP metadata: $SAKAI_HOME/ssocircle_idp.xml"
fi

# Create sakai-saml.properties in Tomcat directory
echo "Creating sakai-saml.properties in Tomcat SAML directory..."
cat > "$TOMCAT_SAML_DIR/sakai-saml.properties" << EOL
# SAML Configuration Properties
# Generated by migrate-saml.sh on $(date)
# Located in Tomcat SAML directory: $TOMCAT_SAML_DIR

# Entity IDs
sakai.saml.sp.entityId=SakaiSAMLApp
sakai.saml.idp.entityId=http://idp.ssocircle.com

# Metadata paths
sakai.saml.sp.metadata.path=$TOMCAT_SAML_DIR/SakaiSAMLApp_sp.xml
sakai.saml.idp.metadata.path=$TOMCAT_SAML_DIR/ssocircle_idp.xml

# SAML Authentication Properties
sakai.saml.auth.useEppn=true
sakai.saml.auth.eppnAttributeName=urn:oid:1.3.6.1.4.1.5923.1.1.1.6
sakai.saml.auth.useUpn=true
sakai.saml.auth.upnAttributeName=http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn
sakai.saml.auth.defaultAttributeName=sub
sakai.saml.auth.appendAtSign=false
sakai.saml.auth.atSignDomain=

# Timeout settings (in seconds)
sakai.saml.maxAuthenticationAge=7200

# Logging settings
sakai.saml.verbose.logging=false

# URLs
sakai.saml.loginUrl=/container/saml/login
sakai.saml.logoutUrl=/container/saml/logout
sakai.saml.ssoUrl=/container/saml/SSO
sakai.saml.sloUrl=/container/saml/SingleLogout
sakai.saml.metadataUrl=/container/saml/metadata
EOL

echo "Created $TOMCAT_SAML_DIR/sakai-saml.properties"

# Also create a mocksaml properties file for testing
echo "Creating mocksaml configuration in Tomcat SAML directory..."
cat > "$TOMCAT_SAML_DIR/sakai-saml-mocksaml.properties" << EOL
# MockSaml Configuration for Testing
# Generated by migrate-saml.sh on $(date)
# Located in Tomcat SAML directory: $TOMCAT_SAML_DIR

# Enable MockSaml mode
sakai.saml.mock.enabled=true
sakai.saml.mock.baseUrl=http://localhost:8080/mocksaml
sakai.saml.verbose.logging=true

# Entity IDs
sakai.saml.sp.entityId=sakai-sp
sakai.saml.idp.entityId=mocksaml-idp

# Metadata URLs
sakai.saml.idp.metadata.url=${sakai.saml.mock.baseUrl}/metadata
sakai.saml.idp.sso.url=${sakai.saml.mock.baseUrl}/sso

# Mock user settings
sakai.saml.mock.username=testuser
EOL

echo "Created $TOMCAT_SAML_DIR/sakai-saml-mocksaml.properties"

# Check if Java is available for running the converter
if command -v java &> /dev/null; then
  echo "Java is available. You can run the MetadataConverter with:"
  echo "java -cp sakai-login-tool.jar org.sakaiproject.login.saml.MetadataConverter idp $SAKAI_HOME/ssocircle_idp.xml $SAKAI_HOME/ssocircle_idp_new.xml"
else
  echo "Java not found. Please manually convert the metadata files."
fi

# Backup and replace the SAML configuration file
WEBAPP_DIR=$(dirname "$0")
if [ -f "$WEBAPP_DIR/xlogin-context.saml.xml" ]; then
  echo "Backing up xlogin-context.saml.xml..."
  cp "$WEBAPP_DIR/xlogin-context.saml.xml" "$BACKUP_DIR/xlogin-context.saml.xml.bak"
  echo "Replacing with new SAML configuration..."
  cp "$WEBAPP_DIR/xlogin-context.saml-new.xml" "$WEBAPP_DIR/xlogin-context.saml.xml"
  echo "Successfully replaced SAML configuration file"
else
  echo "Warning: xlogin-context.saml.xml not found in the current directory"
fi

# Ensure both XML files have proper Sakai service bean definitions
update_services() {
  local file="$1"
  if [ -f "$file" ]; then
    echo "Checking service bean definitions in $file..."
    
    # Check if the file already has the correct component manager bean definition
    if ! grep -q "componentManager.*org.sakaiproject.component.cover.ComponentManager" "$file"; then
      echo "Updating service bean definitions in $file..."
      # Create a backup
      cp "$file" "${file}.bak"
      
      # Insert the component manager after the component-scan tag
      sed -i.tmp '/<context:component-scan/a\
    <!-- Import required Sakai component manager -->\
    <bean id="componentManager" \
          class="org.sakaiproject.component.cover.ComponentManager" \
          factory-method="getInstance" />' "$file"
      
      # Replace the SessionManager bean
      sed -i.tmp '/<bean id="org.sakaiproject.tool.api.SessionManager"/,/<\/bean>/ c\
    <!-- Legacy service beans (for backward compatibility) -->\
    <bean id="org.sakaiproject.tool.api.SessionManager" \
          factory-bean="componentManager"\
          factory-method="get">\
        <constructor-arg value="org.sakaiproject.tool.api.SessionManager" />\
    </bean>' "$file"
      
      # Replace the UsageSessionService bean
      sed -i.tmp '/<bean id="org.sakaiproject.event.api.UsageSessionService"/,/<\/bean>/ c\
    <bean id="org.sakaiproject.event.api.UsageSessionService" \
          factory-bean="componentManager"\
          factory-method="get">\
        <constructor-arg value="org.sakaiproject.event.api.UsageSessionService" />\
    </bean>\
    \
    <!-- Autowireable service proxy beans (with exact type names) -->\
    <bean id="sessionManager" \
          class="org.sakaiproject.tool.api.SessionManager" \
          factory-bean="componentManager"\
          factory-method="get">\
        <constructor-arg value="org.sakaiproject.tool.api.SessionManager" />\
    </bean>\
    \
    <bean id="usageSessionService" \
          class="org.sakaiproject.event.api.UsageSessionService" \
          factory-bean="componentManager"\
          factory-method="get">\
        <constructor-arg value="org.sakaiproject.event.api.UsageSessionService" />\
    </bean>' "$file"
      
      rm -f "${file}.tmp"
      echo "Service bean definitions updated in $file"
    else
      echo "Service bean definitions already updated in $file"
    fi
  fi
}

# Update service bean definitions in both XML files
update_services "$WEBAPP_DIR/xlogin-context.saml.xml"
update_services "$WEBAPP_DIR/xlogin-context.saml-new.xml"

echo ""
echo "Migration complete!"
echo "Next steps:"
echo "1. Review and edit $TOMCAT_SAML_DIR/sakai-saml.properties"
echo "2. Run the MetadataConverter if necessary"
echo "3. Set the following system properties to enable SAML:"
echo "   -Dsaml.env=production -Dspring.profiles.active=saml"
echo "4. Restart Tomcat to apply changes"
echo ""
echo "For testing with MockSAML.com, use:"
echo "   -Dsaml.env=mocksamlcom -Dspring.profiles.active=saml"
echo ""
echo "Backup of original files is located at: $BACKUP_DIR"