<?xml version="1.0" encoding="UTF-8" ?>
<!--
  SAML Service Provider Configuration for Sakai
  This configuration supports multiple IDPs and is streamlined for an SP-only setup.
  
  Key Features:
  - Support for multiple institutional IDPs
  - Username extraction from SAML attributes (ePPN by default)
  - Proper Sakai session termination on logout
  
  Edit the multipleIdpRegistrationRepository bean to configure multiple IDPs
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Enable auto-wiring -->
    <context:annotation-config/>
    <context:component-scan base-package="org.sakaiproject.login.saml"/>

    <!-- ===================== REDIRECT HANDLERS ===================== -->
    
    <bean id="containerRedirectStrategy" class="org.springframework.security.web.DefaultRedirectStrategy">
        <property name="contextRelative" value="true"/>
    </bean>

    <bean id="successRedirectHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="defaultTargetUrl" value="/portal"/>
        <property name="redirectStrategy" ref="containerRedirectStrategy"/>
    </bean>

    <bean id="failureRedirectHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="useForward" value="true"/>
        <property name="defaultFailureUrl" value="/portal/xlogin"/>
        <property name="redirectStrategy" ref="containerRedirectStrategy"/>
    </bean>

    <bean id="successLogoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/portal"/>
        <property name="redirectStrategy" ref="containerRedirectStrategy"/>
    </bean>
    
    <!-- ===================== SAKAI SESSION HANDLING ===================== -->
    
    <!-- Sakai-specific handler to properly terminate Sakai sessions during SAML logout -->
    <bean id="sakaiLogoutHandler" class="org.sakaiproject.login.saml.SakaiLogoutHandler">
        <property name="usageSessionService" ref="org.sakaiproject.event.api.UsageSessionService"/>
        <property name="sessionManager" ref="org.sakaiproject.tool.api.SessionManager"/>
        <property name="invalidateSakaiSession" value="true"/>
    </bean>

    <!-- ===================== SAML AUTHENTICATION ===================== -->
    
    <!-- SAML Authentication Provider with username extraction -->
    <bean id="samlAuthenticationProvider" factory-bean="sakaiSamlAuthenticationConverter" factory-method="createProvider"/>

    <!-- Extracts usernames from SAML assertions using the specified attribute -->
    <bean id="sakaiSamlAuthenticationConverter" class="org.sakaiproject.login.saml.SakaiSamlAuthenticationConverter">
        <!-- Common attribute options: 
             - ePPN (eduPersonPrincipalName): "urn:oid:1.3.6.1.4.1.5923.1.1.1.6"
             - UPN: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn"
             - Email: "urn:oid:0.9.2342.19200300.100.1.3" 
        -->
        <property name="usernameAttributeName" value="urn:oid:1.3.6.1.4.1.5923.1.1.1.6"/>
        
        <!-- Maximum authentication age (kept for compatibility, but handled by SAML assertion validity)
             Note: In Spring Security 5.7.x, expiration is controlled by the SAML assertion itself
             through the NotBefore and NotOnOrAfter conditions, which are enforced automatically. -->
        <property name="maxAuthenticationAge" value="7200"/>
    </bean>

    <!-- ===================== MULTIPLE IDP CONFIGURATION ===================== -->
    
    <!-- Repository that holds all IDP registrations - this is the key for multi-IDP support -->
    <bean id="multipleIdpRegistrationRepository" 
          class="org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository">
        <constructor-arg>
            <list>
                <!-- Default IDP configuration -->
                <bean class="org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration"
                      factory-method="withRegistrationId">
                    <constructor-arg value="default-idp" />
                    <constructor-arg>
                        <bean class="org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrations"
                              factory-method="fromMetadataLocation">
                            <constructor-arg value="file:/opt/tomcat/sakai/ssocircle_idp.xml" />
                        </bean>
                    </constructor-arg>
                    <property name="entityId" value="SakaiSAMLApp" />
                    <property name="assertionConsumerServiceLocation" value="{baseUrl}/container/saml2/SSO/default-idp" />
                    <property name="singleLogoutServiceLocation" value="{baseUrl}/container/saml2/logout/default-idp" />
                </bean>
                
                <!-- 
                Add additional IDPs by copying the bean above and changing:
                1. The registration ID (must be unique)
                2. The metadata location to point to the IDP's metadata file
                3. Change the assertionConsumerServiceLocation and singleLogoutServiceLocation
                   to use the same registration ID in the path
                
                For example:
                
                <bean class="org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration"
                      factory-method="withRegistrationId">
                    <constructor-arg value="campus-idp" />
                    <constructor-arg>
                        <bean class="org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrations"
                              factory-method="fromMetadataLocation">
                            <constructor-arg value="file:/opt/tomcat/sakai/campus_idp.xml" />
                        </bean>
                    </constructor-arg>
                    <property name="entityId" value="SakaiSAMLApp" />
                    <property name="assertionConsumerServiceLocation" value="{baseUrl}/container/saml2/SSO/campus-idp" />
                    <property name="singleLogoutServiceLocation" value="{baseUrl}/container/saml2/logout/campus-idp" />
                </bean>
                -->
            </list>
        </constructor-arg>
    </bean>
    
    <!-- ===================== SAML FILTER CONFIGURATION ===================== -->
    
    <!-- SAML Security Filter Chain -->
    <security:http auto-config="false" use-expressions="false" entry-point-ref="samlLoginEntryPoint">
        <security:csrf disabled="true"/>
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <security:custom-filter position="SAML2_LOGIN_FILTER" ref="saml2WebSsoAuthenticationFilter" />
        <security:custom-filter after="SAML2_LOGIN_FILTER" ref="saml2LogoutFilter" />
        <security:logout logout-url="/container/saml2/logout" success-handler-ref="successLogoutHandler" />
    </security:http>

    <!-- SAML Login Entry Point -->
    <bean id="samlLoginEntryPoint" 
          class="org.springframework.security.saml2.provider.service.web.authentication.Saml2WebSsoAuthenticationRequestFilter">
        <constructor-arg ref="multipleIdpRegistrationRepository" />
    </bean>

    <!-- SAML Authentication Filter -->
    <bean id="saml2WebSsoAuthenticationFilter"
          class="org.springframework.security.saml2.provider.service.web.authentication.Saml2WebSsoAuthenticationFilter">
        <constructor-arg>
            <bean class="org.springframework.security.saml2.provider.service.web.authentication.OpenSaml4AuthenticationRequestResolver">
                <constructor-arg ref="multipleIdpRegistrationRepository" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.security.web.authentication.AuthenticationConverter" />
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.security.authentication.ProviderManager">
                <constructor-arg>
                    <list>
                        <ref bean="samlAuthenticationProvider" />
                    </list>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <property name="authenticationSuccessHandler" ref="successRedirectHandler" />
        <property name="authenticationFailureHandler" ref="failureRedirectHandler" />
    </bean>

    <!-- SAML Logout Filter -->
    <bean id="saml2LogoutFilter"
          class="org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml4LogoutRequestFilter">
        <constructor-arg ref="multipleIdpRegistrationRepository" />
        <property name="logoutRequestResolver">
            <bean class="org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml4LogoutRequestResolver">
                <constructor-arg ref="multipleIdpRegistrationRepository" />
            </bean>
        </property>
        <property name="logoutHandler" ref="sakaiLogoutHandler" />
    </bean>

    <security:authentication-manager>
        <security:authentication-provider ref="samlAuthenticationProvider" />
    </security:authentication-manager>

</beans>