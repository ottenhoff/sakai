<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Enable auto-wiring -->
    <context:annotation-config/>
    
    <!-- Component scanning for our custom SAML classes -->
    <context:component-scan base-package="org.sakaiproject.login.saml"/>

    <bean id="containerRedirectStrategy" class="org.springframework.security.web.DefaultRedirectStrategy">
        <property name="contextRelative" value="true"/>
    </bean>

    <!-- Handler deciding where to redirect user after successful login -->
    <bean id="successRedirectHandler"
          class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="defaultTargetUrl" value="/portal"/>
        <property name="redirectStrategy" ref="containerRedirectStrategy"/>
    </bean>

    <!-- Handler deciding where to redirect user after failed login -->
    <bean id="failureRedirectHandler"
          class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="useForward" value="true"/>
        <property name="defaultFailureUrl" value="/portal/xlogin"/>
        <property name="redirectStrategy" ref="containerRedirectStrategy"/>
    </bean>

    <!-- Handler for successful logout -->
    <bean id="successLogoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/portal"/>
        <property name="redirectStrategy" ref="containerRedirectStrategy"/>
    </bean>

    <!-- Sakai SAML logout handler -->
    <bean id="sakaiLogoutHandler" class="org.sakaiproject.login.saml.SakaiLogoutHandler">
        <property name="usageSessionService" ref="org.sakaiproject.event.api.UsageSessionService"/>
        <property name="sessionManager" ref="org.sakaiproject.tool.api.SessionManager"/>
        <property name="invalidateSakaiSession" value="true"/>
    </bean>

    <!-- SAML Authentication Provider with custom converter -->
    <bean id="samlAuthenticationProvider" factory-bean="sakaiSamlAuthenticationConverter" factory-method="createProvider"/>

    <!-- Custom SAML authentication converter that extracts username from SAML attributes -->
    <bean id="sakaiSamlAuthenticationConverter" class="org.sakaiproject.login.saml.SakaiSamlAuthenticationConverter">
        <!-- Configure which SAML attribute to use for username extraction. Default is ePPN -->
        <property name="usernameAttributeName" value="urn:oid:1.3.6.1.4.1.5923.1.1.1.6"/>
        
        <!-- Alternatively, use UPN attribute by using the UpnSamlAuthenticationConverter instead:
        <bean id="sakaiSamlAuthenticationConverter" class="org.sakaiproject.login.saml.UpnSamlAuthenticationConverter"/>
        -->
    </bean>

    <!-- RelyingPartyRegistrationRepository -->
    <bean id="relyingPartyRegistrationRepository" 
          class="org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository">
        <constructor-arg>
            <bean class="org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration"
                  factory-method="withRegistrationId">
                <constructor-arg value="sakai" />
                <constructor-arg>
                    <bean class="org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrations"
                          factory-method="fromMetadataLocation">
                        <constructor-arg value="file:/opt/tomcat/sakai/ssocircle_idp.xml" />
                    </bean>
                </constructor-arg>
                <property name="entityId" value="SakaiSAMLApp" />
                <property name="assertionConsumerServiceLocation" value="{baseUrl}/container/saml2/SSO/sakai" />
                <property name="singleLogoutServiceLocation" value="{baseUrl}/container/saml2/logout/sakai" />
            </bean>
        </constructor-arg>
    </bean>
    
    <!-- SAML Security Filter Chain -->
    <security:http auto-config="false" use-expressions="false" entry-point-ref="samlLoginEntryPoint">
        <security:csrf disabled="true"/>
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <security:custom-filter position="SAML2_LOGIN_FILTER" ref="saml2WebSsoAuthenticationFilter" />
        <security:custom-filter after="SAML2_LOGIN_FILTER" ref="saml2LogoutFilter" />
        <security:logout logout-url="/container/saml2/logout" success-handler-ref="successLogoutHandler" />
    </security:http>

    <!-- SAML Login Entry Point -->
    <bean id="samlLoginEntryPoint" 
          class="org.springframework.security.saml2.provider.service.web.authentication.Saml2WebSsoAuthenticationRequestFilter">
        <constructor-arg ref="relyingPartyRegistrationRepository" />
    </bean>

    <!-- SAML Authentication Filter -->
    <bean id="saml2WebSsoAuthenticationFilter"
          class="org.springframework.security.saml2.provider.service.web.authentication.Saml2WebSsoAuthenticationFilter">
        <constructor-arg>
            <bean class="org.springframework.security.saml2.provider.service.web.authentication.OpenSaml4AuthenticationRequestResolver">
                <constructor-arg ref="relyingPartyRegistrationRepository" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.security.web.authentication.AuthenticationConverter" />
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.security.authentication.ProviderManager">
                <constructor-arg>
                    <list>
                        <ref bean="samlAuthenticationProvider" />
                    </list>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <property name="authenticationSuccessHandler" ref="successRedirectHandler" />
        <property name="authenticationFailureHandler" ref="failureRedirectHandler" />
    </bean>

    <!-- SAML Logout Filter -->
    <bean id="saml2LogoutFilter"
          class="org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml4LogoutRequestFilter">
        <constructor-arg ref="relyingPartyRegistrationRepository" />
        <property name="logoutRequestResolver">
            <bean class="org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml4LogoutRequestResolver">
                <constructor-arg ref="relyingPartyRegistrationRepository" />
            </bean>
        </property>
        <property name="logoutHandler" ref="sakaiLogoutHandler" />
    </bean>

    <security:authentication-manager>
        <security:authentication-provider ref="samlAuthenticationProvider" />
    </security:authentication-manager>

</beans>